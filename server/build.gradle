plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
//    id 'checkstyle'
    id 'org.asciidoctor.jvm.convert' version '3.3.2' // REST Docs
}

group = 'kr.or.kosa'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions // REST Docs
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets")) // REST Docs
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // QueryDSL Implementation
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'io.projectreactor:reactor-test'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Spring security, JWT
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // REST Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // 샘플데이터 FAKER
    implementation 'net.datafaker:datafaker:2.3.1'

    // Excel
    implementation group: 'org.apache.poi', name: 'poi', version: '4.1.2'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2' // .xlsx 를 사용하려면 해당 의존성을 추가해야합니다.

    // SMS
    implementation 'net.nurigo:sdk:4.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Email
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.6.3'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // yml 값 매핑하여 java 코드에서 객체로 사용
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // 프로메테우스
    implementation ("org.springframework.boot:spring-boot-starter-actuator")
    runtimeOnly ("io.micrometer:micrometer-registry-prometheus")

    // Logback
    implementation group: 'com.github.danielwegener', name: 'logback-kafka-appender', version: '0.2.0-RC2'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // 테스트 롬복
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir // REST Docs
}

// REST Docs
asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
    // source를 지정하면 특정 adoc만 HTML로 만듬
    sources {
        include("**")
    }
    // 경로를 baseDir로 맞춰줌
    baseDirFollowsSourceFile()
    doFirst {
        file(snippetsDir).mkdirs()
    }
}

// REST Docs
tasks.register('copyDocs', Copy) {
    dependsOn asciidoctor
    from "${asciidoctor.outputDir}"
    into "src/main/resources/static/docs"   // src/main/resources/static/docs로 복사
}

// REST Docs
build {
    dependsOn copyDocs
}

bootJar {
    mainClass = 'kr.or.kosa.cmsplusmain.CmsplusMainApplication' // 실제 메인 클래스 이름으로 변경
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}


// Lint
//tasks.withType(JavaCompile).configureEach {
//    options.encoding = 'UTF-8'
//}
//
//tasks.withType(Checkstyle).configureEach {
//    mustRunAfter 'compileJava'
//    reports {
//        xml.required = false
//        html.required = true
//    }
//}
//
//checkstyle {
//    configFile = file("config/checkstyle/naver-checkstyle-rules.xml")
//    configProperties = ["suppressionFile": "config/checkstyle/naver-checkstyle-suppressions.xml"]
//    sourceSets = [sourceSets.main] // CompileQuerydsl 오류 해결
//}
//
//checkstyleMain.source = fileTree('src/main/java')